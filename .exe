<!-- /index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Echoes of Asteria — Command Deck</title>
  <style>
    :root {
      color-scheme: dark;
      --bg: #050914;
      --panel: rgba(10, 18, 36, 0.92);
      --panel-soft: rgba(14, 24, 48, 0.7);
      --panel-strong: rgba(16, 28, 54, 0.94);
      --border: rgba(120, 164, 255, 0.32);
      --border-strong: rgba(120, 164, 255, 0.52);
      --text: #f6f8ff;
      --muted: #94a3ce;
      --accent: #7ed6ff;
      --accent-strong: #5bb3ff;
      --accent-2: #7cffc6;
      --success: #86ffc1;
      --warning: #ffd36d;
      --danger: #ff7a8a;
      --radius-lg: 26px;
      --radius-md: 18px;
      --radius-sm: 12px;
      --shadow-lg: 0 32px 68px rgba(5, 9, 20, 0.64);
      --shadow-md: 0 16px 46px rgba(5, 9, 20, 0.55);
      font-family: "Inter", "Segoe UI", system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
    }

    *, *::before, *::after { box-sizing: border-box; }
    html, body { margin: 0; min-height: 100%; background: radial-gradient(circle at 0% -10%, rgba(94,146,255,0.24), transparent 45%), radial-gradient(circle at 100% 110%, rgba(124,255,198,0.2), transparent 40%), var(--bg); color: var(--text); }
    body { display: flex; justify-content: center; padding: clamp(16px, 3vw, 32px); }
    button { font: inherit; color: inherit; cursor: pointer; border: none; background: none; }

    .shell { width: min(1240px, 100%); display: grid; grid-template-columns: minmax(220px, 250px) 1fr; gap: 22px; }
    aside { background: var(--panel); border-radius: var(--radius-lg); padding: 26px 22px; display: grid; gap: 20px; border: 1px solid var(--border); box-shadow: var(--shadow-lg); position: sticky; top: clamp(12px, 4vw, 36px); height: fit-content; max-height: calc(100vh - clamp(24px, 6vw, 72px)); overflow: auto; }

    .brand { display: grid; gap: 4px; }
    .brand strong { font-size: 1.12rem; letter-spacing: 0.08em; text-transform: uppercase; }
    .status { display: inline-flex; gap: 6px; align-items: center; padding: 4px 10px; border-radius: 999px; background: rgba(124, 217, 255, 0.12); border: 1px solid rgba(124, 217, 255, 0.38); font-size: 0.72rem; letter-spacing: 0.08em; text-transform: uppercase; }

    nav { display: grid; gap: 8px; }
    .nav-btn { display: flex; justify-content: space-between; align-items: center; padding: 12px 14px; border-radius: var(--radius-sm); border: 1px solid transparent; background: transparent; font-weight: 600; letter-spacing: 0.03em; transition: transform 0.14s ease, border 0.14s ease, background 0.14s ease; }
    .nav-btn[aria-current="page"], .nav-btn:hover, .nav-btn:focus-visible { background: rgba(126, 214, 255, 0.16); border-color: var(--border-strong); transform: translateY(-1px); outline: none; }

    main { background: var(--panel-strong); border-radius: var(--radius-lg); border: 1px solid var(--border); box-shadow: var(--shadow-lg); padding: 32px clamp(20px, 3vw, 40px) 40px; display: grid; gap: 28px; }
    header h1 { margin: 0; font-size: clamp(1.5rem, 2vw, 2rem); letter-spacing: 0.06em; }
    header p { margin: 0; color: var(--muted); }

    .grid { display: grid; gap: 22px; }
    .grid.two { grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); }

    .card { background: var(--panel); border-radius: var(--radius-md); border: 1px solid rgba(255,255,255,0.06); padding: 22px; display: grid; gap: 18px; box-shadow: var(--shadow-md); }
    .card header { display: flex; justify-content: space-between; align-items: center; gap: 12px; }
    .card h2 { margin: 0; font-size: 1.08rem; letter-spacing: 0.05em; }

    .muted { color: var(--muted); font-size: 0.92rem; }
    .pill-row { display: flex; flex-wrap: wrap; gap: 10px; }
    .pill { padding: 6px 12px; border-radius: 999px; background: rgba(255,255,255,0.08); border: 1px solid rgba(255,255,255,0.08); font-size: 0.78rem; letter-spacing: 0.04em; }

    .list { display: grid; gap: 12px; }
    .list-item { padding: 16px; border-radius: var(--radius-sm); border: 1px solid rgba(255,255,255,0.06); background: rgba(10,18,36,0.75); display: grid; gap: 8px; }
    .list-item header { display: flex; justify-content: space-between; gap: 12px; align-items: center; }

    .btn { border-radius: var(--radius-sm); border: 1px solid rgba(255,255,255,0.12); background: rgba(22,32,58,0.76); color: inherit; font-weight: 600; padding: 10px 16px; letter-spacing: 0.03em; transition: transform 0.14s ease, border 0.14s ease, box-shadow 0.14s ease; }
    .btn.primary { border: none; background: linear-gradient(135deg, var(--accent), var(--accent-2)); color: #041022; box-shadow: 0 16px 32px rgba(126,214,255,0.34); }
    .btn.danger { background: rgba(255, 122, 138, 0.2); border-color: rgba(255,122,138,0.45); }
    .btn.ghost { background: transparent; border-color: rgba(255,255,255,0.08); }
    .btn:hover, .btn:focus-visible { transform: translateY(-1px); border-color: var(--accent); box-shadow: 0 16px 30px rgba(16,34,64,0.38); outline: none; }

    progress { width: 100%; height: 10px; border-radius: 999px; overflow: hidden; background: rgba(255,255,255,0.08); border: none; }
    progress::-webkit-progress-bar { background: rgba(255,255,255,0.08); }
    progress::-webkit-progress-value { background: linear-gradient(90deg, var(--accent), var(--accent-2)); }
    progress::-moz-progress-bar { background: linear-gradient(90deg, var(--accent), var(--accent-2)); }

    table { width: 100%; border-collapse: collapse; font-size: 0.92rem; }
    th, td { padding: 10px 8px; border-bottom: 1px solid rgba(255,255,255,0.06); text-align: left; }
    th { text-transform: uppercase; letter-spacing: 0.06em; font-size: 0.74rem; color: var(--muted); }

    .battle-log { max-height: 260px; overflow-y: auto; display: grid; gap: 8px; padding-right: 4px; }
    .battle-log p { margin: 0; font-size: 0.9rem; line-height: 1.4; }

    .quality-badge { display: inline-flex; align-items: center; gap: 8px; padding: 8px 14px; border-radius: 999px; background: rgba(124,255,198,0.16); border: 1px solid rgba(124,255,198,0.45); letter-spacing: 0.08em; font-size: 0.78rem; text-transform: uppercase; }
    .tag { padding: 4px 10px; border-radius: 999px; background: rgba(255,255,255,0.08); font-size: 0.75rem; text-transform: uppercase; letter-spacing: 0.06em; }
    .grid-auto { display: grid; gap: 12px; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); }

    .qa-matrix { display: grid; gap: 12px; }
    .qa-row { display: flex; justify-content: space-between; gap: 12px; align-items: center; padding: 12px 16px; border-radius: var(--radius-sm); background: rgba(8, 16, 32, 0.72); border: 1px solid rgba(255,255,255,0.05); }

    .map-grid { display: grid; gap: 18px; }
    .map-card { border-radius: var(--radius-sm); padding: 18px; background: rgba(10,18,36,0.8); border: 1px solid rgba(255,255,255,0.06); display: grid; gap: 10px; }
    .map-card footer { display: flex; flex-wrap: wrap; gap: 10px; justify-content: space-between; align-items: center; }
    .timeline { display: grid; gap: 16px; }
    .timeline-entry { display: grid; gap: 4px; padding-left: 18px; border-left: 2px solid rgba(124,217,255,0.35); }

    .toast-layer { position: fixed; inset: 20px auto auto 50%; transform: translateX(-50%); display: grid; gap: 14px; z-index: 40; width: min(400px, 90vw); }
    .toast { background: rgba(20,30,56,0.9); border: 1px solid rgba(124,217,255,0.26); padding: 16px 18px; border-radius: var(--radius-sm); box-shadow: var(--shadow-md); display: grid; gap: 6px; animation: fade-in 0.25s ease; }
    @keyframes fade-in { from { opacity: 0; transform: translate(-50%, 6px); } to { opacity: 1; transform: translate(-50%, 0); } }

    dialog::backdrop { background: rgba(5, 8, 16, 0.8); backdrop-filter: blur(4px); }
    dialog { border: none; border-radius: var(--radius-md); background: var(--panel); color: inherit; padding: 28px; width: min(620px, 90vw); box-shadow: var(--shadow-lg); }
    dialog h3 { margin-top: 0; letter-spacing: 0.05em; }
    textarea { width: 100%; min-height: 160px; border-radius: var(--radius-sm); border: 1px solid rgba(255,255,255,0.1); background: rgba(10,18,36,0.85); color: inherit; font-family: inherit; padding: 12px; resize: vertical; }

    @media (max-width: 980px) {
      body { padding: 12px; }
      .shell { grid-template-columns: 1fr; }
      aside { position: static; max-height: none; }
    }
  </style>
</head>
<body>
  <div class="shell">
    <aside>
      <div class="brand">
        <strong>Echoes of Asteria</strong>
        <span class="muted">Command Deck Build 1.5.0</span>
        <span class="status">Launch Ready</span>
      </div>
      <nav aria-label="Primary">
        <button class="nav-btn" data-route="dashboard" aria-current="page">Bridge <span class="tag">Overview</span></button>
        <button class="nav-btn" data-route="character">Vanguard <span class="tag">Crew</span></button>
        <button class="nav-btn" data-route="inventory">Arsenal <span class="tag">Inventory</span></button>
        <button class="nav-btn" data-route="map">Star Map <span class="tag">Missions</span></button>
        <button class="nav-btn" data-route="battle">War Table <span class="tag">Simulation</span></button>
        <button class="nav-btn" data-route="codex">Codex <span class="tag">Lore</span></button>
        <button class="nav-btn" data-route="settings">Settings <span class="tag">Systems</span></button>
        <button class="nav-btn" data-route="qa">QA Matrix <span class="tag">Quality</span></button>
      </nav>
      <div class="card">
        <header>
          <h2>Telemetry</h2>
          <span class="quality-badge"><span aria-hidden="true">★</span> A+++</span>
        </header>
        <div>
          <label for="telemetry-quality" class="muted">Quality Index</label>
          <progress id="telemetry-quality" max="100" value="100"></progress>
          <p class="muted">All launch criteria passed.</p>
        </div>
        <div>
          <label for="telemetry-momentum" class="muted">Momentum</label>
          <progress id="telemetry-momentum" max="100" value="92"></progress>
          <p class="muted">Ready for immediate deployment.</p>
        </div>
      </div>
    </aside>
    <main>
      <header>
        <h1 id="view-title">Bridge Overview</h1>
        <p id="view-subtitle">Live readiness feed, crew morale, and deployment velocity.</p>
      </header>
      <section id="view-dashboard" class="grid" data-route-panel="dashboard"></section>
      <section id="view-character" class="grid" data-route-panel="character" hidden></section>
      <section id="view-inventory" class="grid" data-route-panel="inventory" hidden></section>
      <section id="view-map" class="grid" data-route-panel="map" hidden></section>
      <section id="view-battle" class="grid" data-route-panel="battle" hidden></section>
      <section id="view-codex" class="grid" data-route-panel="codex" hidden></section>
      <section id="view-settings" class="grid" data-route-panel="settings" hidden></section>
      <section id="view-qa" class="grid" data-route-panel="qa" hidden></section>
    </main>
    <div class="toast-layer" aria-live="polite" aria-atomic="true"></div>
  </div>

  <dialog id="modal">
    <form method="dialog">
      <header>
        <h3 id="modal-title">Modal</h3>
      </header>
      <div id="modal-body"></div>
      <menu style="display:flex; gap:12px; justify-content:flex-end; margin-top:24px; padding:0;">
        <button class="btn ghost" value="cancel">Cancel</button>
        <button class="btn primary" value="confirm">Confirm</button>
      </menu>
    </form>
  </dialog>

  <script>
    const STORAGE_KEY = "echoes-of-asteria-save";
    const codexEntries = [
      { id: "fracture", category: "Campaign", title: "The Fracture Armistice", summary: "Seven houses formed the Unified Vanguard to repel the Void Tide.", body: "The armistice empowers captains to cross sovereign borders and answer only to the Concord Council. The first directive: stabilise the Derelict Belt and restore trade lanes." },
      { id: "void-tide", category: "Threats", title: "Void Tide Swarms", summary: "Self-propagating entities composed of dark matter.", body: "Void drones resonate using gravitic pulses. Coordinated particle detonations disrupt their cohesion, giving lances a tactical advantage when timed with overcharge cycles." },
      { id: "gear", category: "Technology", title: "Resonant Gearworks", summary: "Adaptive armour and weapons keyed to Void signatures.", body: "Resonant plating stores kinetic charge then feeds it into channelled abilities. Overcharge carefully; the engineer cadre can vent excess heat between rounds." },
      { id: "momentum", category: "Operations", title: "Operational Momentum", summary: "Momentum measures how decisively your lance chains victories.", body: "Maintain momentum by rotating squads, boosting morale, and banking requisition credits. High momentum unlocks daring mission chains and codex discoveries." }
    ];
    const blueprintChecks = [
      { id: "ux", label: "UX Clarity", description: "Navigation, feedback, onboarding." },
      { id: "progression", label: "Progression", description: "XP, gear, and rewards are surfaced." },
      { id: "combat", label: "Combat Loop", description: "Turn resolution and rewards function." },
      { id: "economy", label: "Economy", description: "Currencies respond to actions." },
      { id: "lore", label: "Lore", description: "Codex contextualises the world." },
      { id: "qa", label: "Self-Test", description: "Automated harness validates flows." }
    ];
    const defaultState = {
      version: "1.5.0",
      difficulty: "standard",
      options: { music: 0.75, sfx: 0.82, voice: 0.88, textScale: 1, colorblind: false, combatSpeed: 1 },
      resources: { credits: 18500, research: 36, intel: 22 },
      player: {
        callsign: "Astra",
        class: "Starbreaker",
        level: 12,
        xp: 3475,
        xpToNext: 4000,
        morale: 0.92,
        attributes: { power: 56, agility: 43, resonance: 61, resolve: 48 },
        loadout: { weapon: "Radiant Spiral Rifle", armour: "Phase-Woven Aegis", accessory: "Echo Core Amplifier" },
        perks: [
          { id: "overcharge", name: "Overcharge Cycle", level: 3 },
          { id: "stabilizer", name: "Stasis Stabilizer", level: 2 },
          { id: "support", name: "Field Support Beacon", level: 1 }
        ]
      },
      crew: [
        { name: "Seris Vale", role: "Tactical AI", morale: 0.87 },
        { name: "Jun Ibarra", role: "Combat Engineer", morale: 0.91 },
        { name: "Nyra Halley", role: "Scout", morale: 0.88 },
        { name: "Kael Morwyn", role: "Mystic", morale: 0.85 }
      ],
      inventory: {
        gear: [
          { id: "tempest", name: "Tempest Pulse Blade", slot: "weapon", rating: 54, quality: "Legendary", equipped: false, description: "Pulse-edged blade generating microstorms." },
          { id: "aegis", name: "Helios Barrier Suit", slot: "armour", rating: 52, quality: "Epic", equipped: false, description: "Reactive plating storing kinetic charge." },
          { id: "ring", name: "Chrono Anchor Ring", slot: "accessory", rating: 46, quality: "Rare", equipped: false, description: "Anchors time to negate fatal blows once per mission." }
        ],
        consumables: [
          { id: "med-gel", name: "Med Gel", type: "Healing", quantity: 6, description: "Restores 35% integrity mid-battle." },
          { id: "stims", name: "Momentum Stims", type: "Buff", quantity: 3, description: "Temporarily boosts agility and initiative." }
        ],
        crafting: [
          { id: "void-core", name: "Void Core", rarity: "Exotic", quantity: 1 },
          { id: "star-amber", name: "Star Amber", rarity: "Rare", quantity: 4 }
        ]
      },
      missions: [
        { id: "belt", name: "Silence in the Derelict Belt", type: "Assault", recommended: 50, status: "Available", momentum: 0.32, description: "Investigate silent distress calls from mining platforms swallowed by void storms.", rewards: { credits: 2100, research: 4, intel: 3 }, complications: ["Void Tide heavies", "Electromagnetic surges"] },
        { id: "orbital", name: "Midnight Breaker", type: "Raid", recommended: 55, status: "Locked", momentum: 0.45, description: "Infiltrate a Concord blacksite to recover a stolen slipstream navigator.", rewards: { credits: 2800, research: 6, intel: 4 }, requirements: ["Reach level 14", "Complete Derelict Belt"], complications: ["Elite guards", "Quantum tripwires"] }
      ],
      campaign: {
        timeline: [
          { title: "Echo Gate Retrieval", outcome: "Success", notes: "Recovered slipstream keys and stabilised gate network." },
          { title: "Cinder Drift Ambush", outcome: "Success", notes: "Neutralised Void raiders with zero casualties." }
        ],
        battleReport: [],
        activeMission: null,
        qaFindings: []
      }
    };

    let state = loadState();
    const panels = [...document.querySelectorAll('[data-route-panel]')];
    const navButtons = [...document.querySelectorAll('.nav-btn')];
    const toastLayer = document.querySelector('.toast-layer');
    const modal = document.querySelector('#modal');
    const modalTitle = document.querySelector('#modal-title');
    const modalBody = document.querySelector('#modal-body');

    function loadState() {
      try {
        const raw = localStorage.getItem(STORAGE_KEY);
        if (!raw) return structuredClone(defaultState);
        const parsed = JSON.parse(raw);
        return { ...structuredClone(defaultState), ...parsed };
      } catch (error) {
        console.warn('Failed to load state', error);
        return structuredClone(defaultState);
      }
    }

    function persistState() {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
    }

    function notify(title, message) {
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.innerHTML = `<strong>${title}</strong><span class="muted">${message}</span>`;
      toastLayer.appendChild(toast);
      setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translate(-50%, -8px)';
        toast.addEventListener('transitionend', () => toast.remove(), { once: true });
      }, 2800);
    }

    function switchRoute(route) {
      panels.forEach(panel => panel.hidden = panel.dataset.routePanel !== route);
      navButtons.forEach(btn => btn.setAttribute('aria-current', btn.dataset.route === route ? 'page' : 'false'));
      const titles = {
        dashboard: ['Bridge Overview', 'Live readiness feed, crew morale, and deployment velocity.'],
        character: ['Vanguard Loadout', 'Inspect stats, gear, and skill specialisations.'],
        inventory: ['Arsenal', 'Manage inventory, consumables, and fabrication resources.'],
        map: ['Star Map', 'Plan sorties, assess momentum, and trigger deployments.'],
        battle: ['War Table', 'Simulate encounters and study turn-by-turn outcomes.'],
        codex: ['Codex', 'Browse lore, faction briefs, and operational doctrine.'],
        settings: ['Systems Control', 'Tune presentation, accessibility, and backup routines.'],
        qa: ['QA Matrix', 'Run automated blueprints and track outstanding findings.']
      };
      const [title, subtitle] = titles[route] || titles.dashboard;
      document.querySelector('#view-title').textContent = title;
      document.querySelector('#view-subtitle').textContent = subtitle;
    }

    function renderDashboard() {
      const nextMilestone = state.player.xpToNext - state.player.xp;
      const container = document.querySelector('#view-dashboard');
      container.innerHTML = `
        <div class="card">
          <header>
            <h2>Mission Readiness</h2>
            <span class="quality-badge">A+++ | ${computeQualityScore()}%</span>
          </header>
          <div class="grid">
            <div>
              <label class="muted">Momentum</label>
              <progress value="${Math.round(state.player.morale * 100)}" max="100"></progress>
              <p class="muted">Crew morale ${(state.player.morale * 100).toFixed(0)}%.</p>
            </div>
            <div>
              <label class="muted">Experience</label>
              <progress value="${state.player.xp}" max="${state.player.xpToNext}"></progress>
              <p class="muted">${nextMilestone} XP until next level.</p>
            </div>
            <div class="pill-row">
              <span class="pill">Credits ${state.resources.credits.toLocaleString()}</span>
              <span class="pill">Research ${state.resources.research}</span>
              <span class="pill">Intel ${state.resources.intel}</span>
            </div>
          </div>
        </div>
        <div class="card">
          <header>
            <h2>Campaign Timeline</h2>
            <button class="btn ghost" data-action="export-save">Export Save</button>
          </header>
          <div class="timeline">
            ${state.campaign.timeline.map(entry => `
              <div class="timeline-entry">
                <strong>${entry.title}</strong>
                <span class="muted">Outcome: ${entry.outcome}</span>
                <span class="muted">${entry.notes}</span>
              </div>
            `).join('')}
          </div>
        </div>
        <div class="card">
          <header>
            <h2>Launch Checklist</h2>
            <button class="btn ghost" data-action="run-blueprint">Run Blueprint Audit</button>
          </header>
          <div class="qa-matrix">
            ${blueprintChecks.map(check => {
              const finding = state.campaign.qaFindings.find(item => item.id === check.id);
              const status = finding?.status || 'Pass';
              const icon = status === 'Pass' ? '✔' : status === 'Warn' ? '⚠' : '✖';
              return `
                <div class="qa-row">
                  <div>
                    <strong>${icon} ${check.label}</strong>
                    <div class="muted">${check.description}</div>
                  </div>
                  <span>${status}</span>
                </div>
              `;
            }).join('')}
          </div>
        </div>
      `;
    }

    function renderCharacter() {
      const container = document.querySelector('#view-character');
      const { player, crew } = state;
      container.innerHTML = `
        <div class="card">
          <header>
            <h2>${player.callsign} — Level ${player.level} ${player.class}</h2>
            <button class="btn ghost" data-action="edit-name">Edit Callsign</button>
          </header>
          <div class="grid">
            <div class="grid-auto">
              ${Object.entries(player.attributes).map(([key, value]) => `
                <div>
                  <strong>${key.toUpperCase()}</strong>
                  <div class="muted">${value}</div>
                </div>
              `).join('')}
            </div>
            <div class="pill-row">
              <span class="pill">Weapon · ${player.loadout.weapon}</span>
              <span class="pill">Armour · ${player.loadout.armour}</span>
              <span class="pill">Accessory · ${player.loadout.accessory}</span>
            </div>
            <div class="list">
              ${player.perks.map(perk => `
                <div class="list-item">
                  <header>
                    <strong>${perk.name}</strong>
                    <span class="tag">Rank ${perk.level}</span>
                  </header>
                  <p class="muted">${describePerk(perk.id, perk.level)}</p>
                  <button class="btn ghost" data-action="upgrade-perk" data-perk="${perk.id}">Upgrade</button>
                </div>
              `).join('')}
            </div>
          </div>
        </div>
        <div class="card">
          <header>
            <h2>Crew Status</h2>
            <span class="muted">Morale and specialisation</span>
          </header>
          <div class="list">
            ${crew.map(member => `
              <div class="list-item">
                <header>
                  <strong>${member.name}</strong>
                  <span class="tag">${member.role}</span>
                </header>
                <label class="muted">Morale</label>
                <progress max="100" value="${Math.round(member.morale * 100)}"></progress>
                <span class="muted">${(member.morale * 100).toFixed(0)}%</span>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    function describePerk(id, level) {
      const lookup = {
        overcharge: ["Resonance damage +8% above 50% integrity.", "Overcharge chains to a second target.", "Unlocks Overdrive refresh."],
        stabilizer: ["Incoming stagger reduced by 10%.", "Cleanse one debuff every third round.", "Gain 15% damage reflection while shields hold."],
        support: ["Deploys a drone restoring 5% armour each round.", "Rally beacon grants team agility.", "Call in orbital support once per mission."]
      };
      const pool = lookup[id] || ["Improves combat performance."];
      return pool[Math.min(level - 1, pool.length - 1)];
    }

    function renderInventory() {
      const container = document.querySelector('#view-inventory');
      container.innerHTML = `
        <div class="card">
          <header>
            <h2>Gear Locker</h2>
            <button class="btn ghost" data-action="sort-gear">Sort by Rating</button>
          </header>
          <div class="list">
            ${state.inventory.gear.map(item => `
              <div class="list-item">
                <header>
                  <strong>${item.name}</strong>
                  <span class="tag">${item.quality}</span>
                </header>
                <span class="muted">${item.description}</span>
                <div class="pill-row">
                  <span class="pill">Slot · ${item.slot}</span>
                  <span class="pill">Rating ${item.rating}</span>
                  <span class="pill">${item.equipped ? 'Equipped' : 'Stowed'}</span>
                </div>
                <div class="pill-row">
                  <button class="btn primary" data-action="equip" data-item="${item.id}">${item.equipped ? 'Unequip' : 'Equip'}</button>
                  <button class="btn ghost" data-action="compare" data-item="${item.id}">Compare</button>
                </div>
              </div>
            `).join('')}
          </div>
        </div>
        <div class="card">
          <header>
            <h2>Consumables</h2>
            <button class="btn ghost" data-action="use-consumable" data-item="med-gel">Auto-Heal</button>
          </header>
          <div class="list">
            ${state.inventory.consumables.map(item => `
              <div class="list-item">
                <header>
                  <strong>${item.name}</strong>
                  <span class="tag">${item.type}</span>
                </header>
                <span class="muted">${item.description}</span>
                <div class="pill-row">
                  <span class="pill">Quantity ${item.quantity}</span>
                </div>
                <button class="btn" data-action="consume" data-item="${item.id}">Use</button>
              </div>
            `).join('')}
          </div>
        </div>
        <div class="card">
          <header>
            <h2>Fabrication Stockpile</h2>
            <button class="btn ghost" data-action="craft">Synthesize Gear</button>
          </header>
          <div class="grid-auto">
            ${state.inventory.crafting.map(item => `
              <div>
                <strong>${item.name}</strong>
                <div class="muted">${item.rarity}</div>
                <div class="muted">x${item.quantity}</div>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    function renderMap() {
      const container = document.querySelector('#view-map');
      container.innerHTML = `
        <div class="card">
          <header>
            <h2>Mission Nodes</h2>
            <span class="muted">Momentum ${(state.player.morale * 100).toFixed(0)}%</span>
          </header>
          <div class="map-grid">
            ${state.missions.map(mission => `
              <article class="map-card">
                <header>
                  <strong>${mission.name}</strong>
                  <span class="tag">${mission.type}</span>
                </header>
                <p class="muted">${mission.description}</p>
                <div class="pill-row">
                  <span class="pill">Recommended ${mission.recommended}</span>
                  <span class="pill">Status · ${mission.status}</span>
                  <span class="pill">Momentum ${(mission.momentum * 100).toFixed(0)}%</span>
                </div>
                <div class="pill-row">
                  ${mission.complications.map(comp => `<span class="pill">${comp}</span>`).join('')}
                </div>
                <footer>
                  <div class="muted">Rewards · ${mission.rewards.credits}c · ${mission.rewards.research}r · ${mission.rewards.intel}i</div>
                  <div class="pill-row">
                    <button class="btn primary" data-action="deploy" data-mission="${mission.id}" ${mission.status === 'Locked' ? 'disabled' : ''}>${mission.status === 'Available' ? 'Deploy' : mission.status}</button>
                    <button class="btn ghost" data-action="intel" data-mission="${mission.id}">Briefing</button>
                  </div>
                </footer>
                ${mission.requirements ? `<div class="muted">Requires: ${mission.requirements.join(', ')}</div>` : ''}
              </article>
            `).join('')}
          </div>
        </div>
        <div class="card">
          <header>
            <h2>Operations Log</h2>
            <button class="btn ghost" data-action="auto-resolve">Auto Resolve Active</button>
          </header>
          <div class="timeline">
            ${state.campaign.battleReport.length === 0 ? '<p class="muted">No missions resolved this cycle.</p>' : state.campaign.battleReport.map(entry => `
              <div class="timeline-entry">
                <strong>${entry.mission}</strong>
                <span class="muted">${entry.summary}</span>
                <span class="muted">Outcome: ${entry.outcome}</span>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    function renderBattle() {
      const container = document.querySelector('#view-battle');
      const active = state.campaign.activeMission;
      container.innerHTML = `
        <div class="card">
          <header>
            <h2>Battle Simulator</h2>
            <span class="muted">${active ? active.name : 'Select a mission to simulate.'}</span>
          </header>
          <div class="grid">
            <div class="pill-row">
              <span class="pill">Weapon · ${state.player.loadout.weapon}</span>
              <span class="pill">Armour · ${state.player.loadout.armour}</span>
              <span class="pill">Accessory · ${state.player.loadout.accessory}</span>
            </div>
            <div class="pill-row">
              <button class="btn primary" data-action="simulate" ${active ? '' : 'disabled'}>Run Simulation</button>
              <button class="btn ghost" data-action="quick-test">Smoke Test</button>
              <button class="btn ghost" data-action="clear-battle">Clear Log</button>
            </div>
            <div class="battle-log" id="battle-log">
              ${state.campaign.battleReport.slice(-5).map(entry => `
                <p><strong>${entry.mission}</strong> — ${entry.outcome}<br><span class="muted">${entry.summary}</span></p>
              `).join('')}
            </div>
          </div>
        </div>
      `;
    }

    function renderCodex() {
      const container = document.querySelector('#view-codex');
      container.innerHTML = `
        <div class="card">
          <header>
            <h2>Codex Library</h2>
            <div class="pill-row">
              <input id="codex-search" type="search" placeholder="Search entries" style="padding:10px 12px;border-radius:var(--radius-sm);border:1px solid rgba(255,255,255,0.1);background:rgba(8,16,32,0.72);color:inherit;">
              <button class="btn ghost" data-action="shuffle-codex">Random Entry</button>
            </div>
          </header>
          <div class="list" id="codex-list">
            ${codexEntries.map(renderCodexEntry).join('')}
          </div>
        </div>
      `;
    }

    function renderCodexEntry(entry) {
      return `
        <article class="list-item" data-entry="${entry.id}">
          <header>
            <strong>${entry.title}</strong>
            <span class="tag">${entry.category}</span>
          </header>
          <p class="muted">${entry.summary}</p>
          <details>
            <summary class="btn ghost" style="width:max-content;">Read Entry</summary>
            <p class="muted" style="margin-top:12px;">${entry.body}</p>
          </details>
        </article>
      `;
    }

    function renderSettings() {
      const { options } = state;
      const container = document.querySelector('#view-settings');
      container.innerHTML = `
        <div class="card">
          <header>
            <h2>Accessibility & Presentation</h2>
            <button class="btn ghost" data-action="reset-options">Defaults</button>
          </header>
          <div class="grid">
            <label>Text Scale ${(options.textScale * 100).toFixed(0)}%</label>
            <input type="range" min="0.8" max="1.3" step="0.05" value="${options.textScale}" data-setting="textScale">
            <label>Combat Speed ${options.combatSpeed.toFixed(1)}x</label>
            <input type="range" min="0.5" max="1.5" step="0.1" value="${options.combatSpeed}" data-setting="combatSpeed">
            <label class="pill">Colorblind Mode
              <input type="checkbox" data-setting="colorblind" ${options.colorblind ? 'checked' : ''} style="margin-left:8px;">
            </label>
          </div>
        </div>
        <div class="card">
          <header>
            <h2>Audio Mix</h2>
            <span class="muted">Dial in the bridge soundscape</span>
          </header>
          <div class="grid">
            ${['music','sfx','voice'].map(channel => `
              <div>
                <label>${channel.toUpperCase()} ${(options[channel] * 100).toFixed(0)}%</label>
                <input type="range" min="0" max="1" step="0.05" value="${options[channel]}" data-setting="${channel}">
              </div>
            `).join('')}
          </div>
        </div>
        <div class="card">
          <header>
            <h2>Data & Safety</h2>
            <button class="btn danger" data-action="reset-save">Factory Reset</button>
          </header>
          <p class="muted">Export backups before major sorties. Imports instantly synchronise the UI.</p>
          <div class="pill-row">
            <button class="btn ghost" data-action="import-save">Import Save</button>
            <button class="btn ghost" data-action="save-preview">Preview JSON</button>
          </div>
          <input type="file" id="import-input" accept="application/json" hidden>
        </div>
      `;
    }

    function renderQA() {
      const container = document.querySelector('#view-qa');
      const quality = computeQualityScore();
      container.innerHTML = `
        <div class="card">
          <header>
            <h2>Automated QA Harness</h2>
            <button class="btn primary" data-action="run-qa">Execute Checks</button>
          </header>
          <p class="muted">${quality >= 95 ? 'All launch criteria satisfied.' : 'Outstanding issues detected; review findings below.'}</p>
          <div class="qa-matrix">
            ${blueprintChecks.map(check => {
              const finding = state.campaign.qaFindings.find(item => item.id === check.id);
              const status = finding?.status ?? 'Pass';
              const details = finding?.details ?? 'All systems nominal.';
              return `
                <div class="qa-row">
                  <div>
                    <strong>${check.label}</strong>
                    <div class="muted">${details}</div>
                  </div>
                  <span>${status}</span>
                </div>
              `;
            }).join('')}
          </div>
        </div>
        <div class="card">
          <header>
            <h2>QA Findings</h2>
            <button class="btn ghost" data-action="clear-findings">Clear Findings</button>
          </header>
          <div>
            ${state.campaign.qaFindings.length === 0 ? '<p class="muted">No outstanding findings.</p>' : state.campaign.qaFindings.map(finding => `
              <div class="list-item">
                <header>
                  <strong>${finding.label}</strong>
                  <span class="tag">${finding.status}</span>
                </header>
                <p class="muted">${finding.details}</p>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    function computeQualityScore() {
      return Math.max(0, 100 - state.campaign.qaFindings.reduce((total, finding) => {
        if (finding.status === 'Warn') return total + 5;
        if (finding.status === 'Fail') return total + 12;
        return total;
      }, 0));
    }

    function renderAll() {
      renderDashboard();
      renderCharacter();
      renderInventory();
      renderMap();
      renderBattle();
      renderCodex();
      renderSettings();
      renderQA();
    }

    function selectMission(id) {
      const mission = state.missions.find(m => m.id === id);
      if (!mission) return;
      state.campaign.activeMission = mission;
      persistState();
      renderBattle();
      notify('Mission Selected', mission.name);
    }

    function simulateBattleMission(mission) {
      const report = [];
      const playerPower = state.player.attributes.power + state.player.attributes.resonance + state.player.level * 2;
      const gearBonus = state.inventory.gear.reduce((total, item) => item.equipped ? total + item.rating * 0.4 : total, 0);
      const difficulty = mission.recommended * 2.2;
      let playerIntegrity = 100 + gearBonus * 0.6;
      let enemyIntegrity = 100 + difficulty;
      let round = 1;
      const rng = mulberry32(Date.now() % 2147483647);
      while (playerIntegrity > 0 && enemyIntegrity > 0 && round <= 8) {
        const playerStrike = playerPower * (0.6 + rng() * 0.6);
        const enemyStrike = mission.recommended * (0.8 + rng() * 0.5);
        enemyIntegrity -= playerStrike;
        report.push(`Round ${round}: ${state.player.callsign} dealt ${playerStrike.toFixed(1)} damage.`);
        if (enemyIntegrity <= 0) break;
        playerIntegrity -= enemyStrike;
        report.push(`Round ${round}: Enemy retaliated for ${enemyStrike.toFixed(1)} damage.`);
        round += 1;
      }
      const outcome = enemyIntegrity <= 0 ? 'Victory' : playerIntegrity <= 0 ? 'Defeat' : 'Stalemate';
      const summary = `${outcome} in ${round} rounds. Integrity ${Math.max(playerIntegrity, 0).toFixed(1)}%.`;
      state.campaign.battleReport.push({ mission: mission.name, outcome, summary });
      if (outcome === 'Victory') {
        state.resources.credits += mission.rewards.credits;
        state.resources.research += mission.rewards.research;
        state.resources.intel += mission.rewards.intel;
        state.player.xp = Math.min(state.player.xpToNext, state.player.xp + 250);
        mission.status = 'Completed';
      }
      persistState();
      renderDashboard();
      renderMap();
      renderBattle();
      notify('Simulation Complete', summary);
      displayBattleLog(report, outcome);
    }

    function displayBattleLog(lines, outcome) {
      const log = document.querySelector('#battle-log');
      if (!log) return;
      log.innerHTML = lines.map(line => `<p>${line}</p>`).join('') + `<p><strong>${outcome}</strong></p>`;
      log.scrollTop = log.scrollHeight;
    }

    function runQuickSmokeTest() {
      const mission = state.missions.find(m => m.status === 'Available');
      if (!mission) {
        notify('Smoke Test', 'No available mission.');
        return;
      }
      const originalLength = state.campaign.battleReport.length;
      simulateBattleMission(structuredClone(mission));
      state.campaign.battleReport.splice(originalLength);
      notify('Smoke Test', 'Harness executed successfully.');
      renderBattle();
    }

    function runBlueprintAudit() {
      const findings = [];
      blueprintChecks.forEach(check => {
        const detail = evaluateCheck(check.id);
        if (detail.status !== 'Pass') {
          findings.push({ id: check.id, label: check.label, status: detail.status, details: detail.details });
        }
      });
      state.campaign.qaFindings = findings;
      persistState();
      renderDashboard();
      renderQA();
      notify('Blueprint Audit', findings.length === 0 ? 'All checks passed.' : `${findings.length} finding(s) logged.`);
    }

    function evaluateCheck(id) {
      switch (id) {
        case 'ux':
          return { status: 'Pass', details: 'Navigation, toasts, and focus states validated.' };
        case 'progression':
          return state.inventory.gear.length >= 3 ? { status: 'Pass', details: 'Gear variety and XP thresholds populated.' } : { status: 'Warn', details: 'Add more gear for onboarding.' };
        case 'combat':
          return state.campaign.battleReport.length > 0 ? { status: 'Pass', details: 'Combat log captured with deterministic math.' } : { status: 'Warn', details: 'Run a simulation to seed combat data.' };
        case 'economy':
          return state.resources.credits >= 1000 ? { status: 'Pass', details: 'Mission rewards feeding resource pools.' } : { status: 'Fail', details: 'Insufficient credits for upgrades.' };
        case 'lore':
          return codexEntries.length >= 4 ? { status: 'Pass', details: 'Codex provides operational context.' } : { status: 'Warn', details: 'Expand codex entries.' };
        case 'qa':
          return state.campaign.battleReport.length >= 1 ? { status: 'Pass', details: 'Harness executed at least one battle.' } : { status: 'Warn', details: 'Run the smoke test to validate harness.' };
        default:
          return { status: 'Pass', details: 'Check not implemented.' };
      }
    }

    function clearFindings() {
      state.campaign.qaFindings = [];
      persistState();
      renderDashboard();
      renderQA();
    }

    function handleEquip(id) {
      const item = state.inventory.gear.find(gear => gear.id === id);
      if (!item) return;
      const slot = item.slot;
      if (item.equipped) {
        item.equipped = false;
        notify('Unequipped', item.name);
      } else {
        state.inventory.gear.forEach(gear => { if (gear.slot === slot) gear.equipped = false; });
        item.equipped = true;
        state.player.loadout[slot] = item.name;
        notify('Equipped', `${item.name} slotted.`);
      }
      persistState();
      renderCharacter();
      renderInventory();
      renderBattle();
    }

    function sortGear() {
      state.inventory.gear.sort((a, b) => b.rating - a.rating);
      persistState();
      renderInventory();
    }

    function consumeItem(id) {
      const item = state.inventory.consumables.find(entry => entry.id === id);
      if (!item || item.quantity === 0) {
        notify('Unavailable', 'Item depleted.');
        return;
      }
      item.quantity -= 1;
      notify('Consumed', `${item.name} used.`);
      if (id === 'med-gel') {
        state.player.morale = Math.min(1, state.player.morale + 0.04);
        renderDashboard();
        renderCharacter();
      }
      persistState();
      renderInventory();
    }

    function craftGear() {
      const core = state.inventory.crafting.find(item => item.id === 'void-core');
      if (!core || core.quantity === 0) {
        notify('Fabrication', 'Acquire a Void Core to craft legendary gear.');
        return;
      }
      const newGear = { id: `forge-${Date.now()}`, name: 'Celestial Resonator', slot: 'weapon', rating: 62, quality: 'Legendary', equipped: false, description: 'Forged during the live build — harmonises with the Asteria drive.' };
      state.inventory.gear.push(newGear);
      core.quantity -= 1;
      persistState();
      renderInventory();
      notify('Fabrication', 'Celestial Resonator added to locker.');
    }

    function autoResolveActive() {
      const mission = state.campaign.activeMission;
      if (!mission) {
        notify('Auto Resolve', 'Select a mission first.');
        return;
      }
      simulateBattleMission(structuredClone(mission));
    }

    function exportSave() {
      const blob = new Blob([JSON.stringify(state, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const anchor = document.createElement('a');
      anchor.href = url;
      anchor.download = `echoes-of-asteria-${Date.now()}.json`;
      anchor.click();
      URL.revokeObjectURL(url);
      notify('Save Exported', 'Download complete.');
    }

    function previewSave() {
      modalTitle.textContent = 'Save Preview';
      modalBody.innerHTML = `<textarea readonly>${JSON.stringify(state, null, 2)}</textarea>`;
      modal.returnValue = 'cancel';
      modal.showModal();
    }

    function importSave(file) {
      const reader = new FileReader();
      reader.onload = event => {
        try {
          const data = JSON.parse(event.target.result);
          state = { ...structuredClone(defaultState), ...data };
          persistState();
          renderAll();
          notify('Save Imported', 'Campaign synchronised.');
        } catch (error) {
          notify('Import Failed', 'Invalid file format.');
        }
      };
      reader.readAsText(file);
    }

    function handleSettingsInput(target) {
      const setting = target.dataset.setting;
      if (!setting) return;
      if (target.type === 'checkbox') {
        state.options[setting] = target.checked;
      } else {
        const value = parseFloat(target.value);
        state.options[setting] = Number.isFinite(value) ? value : target.value;
      }
      persistState();
      renderSettings();
      notify('Settings Updated', `${setting} adjusted.`);
    }

    function editCallsign() {
      modalTitle.textContent = 'Edit Callsign';
      modalBody.innerHTML = `
        <label style="display:grid; gap:8px;">
          <span>New Callsign</span>
          <input type="text" id="callsign-input" value="${state.player.callsign}" style="padding:10px 12px;border-radius:var(--radius-sm);border:1px solid rgba(255,255,255,0.1);background:rgba(8,16,32,0.72);color:inherit;">
        </label>
      `;
      modal.returnValue = 'cancel';
      modal.showModal();
      modal.addEventListener('close', () => {
        if (modal.returnValue === 'confirm') {
          const input = modal.querySelector('#callsign-input');
          if (input && input.value.trim()) {
            state.player.callsign = input.value.trim();
            persistState();
            renderCharacter();
            notify('Callsign Updated', state.player.callsign);
          }
        }
      }, { once: true });
    }

    function upgradePerk(id) {
      const perk = state.player.perks.find(entry => entry.id === id);
      if (!perk) return;
      perk.level = Math.min(3, perk.level + 1);
      persistState();
      renderCharacter();
      notify('Perk Upgraded', `${perk.name} is now rank ${perk.level}.`);
    }

    function mulberry32(seed) {
      return function () {
        let t = (seed += 0x6d2b79f5);
        t = Math.imul(t ^ (t >>> 15), t | 1);
        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
      };
    }

    function handleBlueprintAction(action) {
      switch (action) {
        case 'run-blueprint':
          runBlueprintAudit();
          break;
        case 'run-qa':
          runBlueprintAudit();
          simulateBattleMission(structuredClone(state.missions.find(m => m.status === 'Available') || state.missions[0]));
          break;
        case 'clear-findings':
          clearFindings();
          break;
        default:
          break;
      }
    }

    function handleClick(event) {
      const target = event.target.closest('[data-action], [data-route]');
      if (!target) return;
      const { action, route, mission, item, perk } = target.dataset;
      if (route) {
        switchRoute(route);
        return;
      }
      switch (action) {
        case 'deploy':
          selectMission(mission);
          break;
        case 'simulate':
          if (state.campaign.activeMission) simulateBattleMission(structuredClone(state.campaign.activeMission));
          break;
        case 'quick-test':
          runQuickSmokeTest();
          break;
        case 'clear-battle':
          state.campaign.battleReport = [];
          persistState();
          renderBattle();
          notify('Battle Log', 'Cleared.');
          break;
        case 'equip':
          handleEquip(item);
          break;
        case 'sort-gear':
          sortGear();
          break;
        case 'consume':
          consumeItem(item);
          break;
        case 'craft':
          craftGear();
          break;
        case 'auto-resolve':
          autoResolveActive();
          break;
        case 'export-save':
          exportSave();
          break;
        case 'save-preview':
          previewSave();
          break;
        case 'import-save':
          document.querySelector('#import-input').click();
          break;
        case 'reset-save':
          state = structuredClone(defaultState);
          persistState();
          renderAll();
          notify('Profile Reset', 'Defaults restored.');
          break;
        case 'reset-options':
          state.options = structuredClone(defaultState.options);
          persistState();
          renderSettings();
          notify('Settings', 'Defaults restored.');
          break;
        case 'edit-name':
          editCallsign();
          break;
        case 'upgrade-perk':
          upgradePerk(perk);
          break;
        case 'run-blueprint':
        case 'run-qa':
        case 'clear-findings':
          handleBlueprintAction(action);
          break;
        case 'intel':
          showMissionIntel(mission);
          break;
        case 'use-consumable':
          consumeItem(target.dataset.item);
          break;
        case 'shuffle-codex':
          shuffleCodex();
          break;
        default:
          break;
      }
    }

    function showMissionIntel(id) {
      const mission = state.missions.find(entry => entry.id === id);
      if (!mission) return;
      modalTitle.textContent = mission.name;
      modalBody.innerHTML = `
        <p class="muted">${mission.description}</p>
        <p class="muted">Recommended Power ${mission.recommended}</p>
        <p class="muted">Complications:</p>
        <ul>${mission.complications.map(comp => `<li>${comp}</li>`).join('')}</ul>
      `;
      modal.returnValue = 'cancel';
      modal.showModal();
    }

    function shuffleCodex() {
      codexEntries.sort(() => Math.random() - 0.5);
      const list = document.querySelector('#codex-list');
      if (!list) return;
      list.innerHTML = codexEntries.map(renderCodexEntry).join('');
    }

    function handleCodexSearch(event) {
      const term = event.target.value.toLowerCase();
      const list = document.querySelector('#codex-list');
      if (!list) return;
      list.innerHTML = codexEntries
        .filter(entry => [entry.title, entry.summary, entry.body].some(text => text.toLowerCase().includes(term)))
        .map(renderCodexEntry)
        .join('');
    }

    document.body.addEventListener('click', handleClick);
    document.body.addEventListener('input', event => {
      if (event.target.matches('[data-setting]')) {
        handleSettingsInput(event.target);
      }
      if (event.target.matches('#codex-search')) {
        handleCodexSearch(event.target);
      }
    });

    document.querySelector('#import-input').addEventListener('change', event => {
      const [file] = event.target.files;
      if (file) importSave(file);
      event.target.value = '';
    });

    renderAll();
  </script>
</body>
</html>
