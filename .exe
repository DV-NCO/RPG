<!-- /index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Echoes of Asteria â€“ Launch Build</title>
  <style>
    :root {
      color-scheme: dark;
      --bg: #04070f;
      --bg-alt: #081124;
      --bg-soft: rgba(16, 28, 52, 0.65);
      --panel: rgba(12, 22, 44, 0.82);
      --panel-solid: #0d1c38;
      --panel-strong: #15284b;
      --panel-glow: rgba(64, 122, 255, 0.16);
      --accent: #7cc8ff;
      --accent-strong: #4cb5ff;
      --accent-soft: rgba(124, 200, 255, 0.12);
      --accent-2: #7bffca;
      --accent-3: #ff9aa2;
      --text: #f1f5ff;
      --muted: #9bb1d9;
      --warning: #ffd66d;
      --success: #88ffc3;
      --danger: #ff748e;
      --border: rgba(136, 170, 240, 0.28);
      --border-strong: rgba(136, 170, 240, 0.45);
      --shadow-lg: 0 32px 60px rgba(0, 0, 0, 0.55);
      --shadow-md: 0 20px 45px rgba(0, 0, 0, 0.45);
      --radius-lg: 22px;
      --radius-md: 18px;
      --radius-sm: 12px;
      font-family: "Inter", "Segoe UI", system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
    }

    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      background: radial-gradient(1400px 820px at 75% -10%, #183460 0%, #04070f 62%);
      color: var(--text);
    }

    .app {
      width: min(1180px, 100%);
      min-height: 100vh;
      display: grid;
      grid-template-rows: auto 1fr auto;
      background: linear-gradient(160deg, rgba(10, 18, 36, 0.98), rgba(3, 6, 14, 0.94));
      box-shadow: var(--shadow-lg);
    }

    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 20px;
      padding: 22px 30px;
      position: sticky;
      top: 0;
      z-index: 5;
      background: rgba(6, 12, 24, 0.92);
      border-bottom: 1px solid var(--border);
      backdrop-filter: blur(14px);
    }

    .brand {
      display: flex;
      align-items: center;
      gap: 16px;
      font-weight: 700;
      letter-spacing: 0.08em;
      text-transform: uppercase;
    }

    .brand .logo {
      width: 42px;
      height: 42px;
      border-radius: 14px;
      background: linear-gradient(135deg, var(--accent), var(--accent-2));
      box-shadow: 0 16px 36px rgba(124, 200, 255, 0.4);
    }

    nav {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
    }

    button {
      font: inherit;
      color: inherit;
      background: none;
      border: none;
      cursor: pointer;
    }

    button:focus-visible,
    [tabindex]:focus-visible {
      outline: 2px solid var(--accent);
      outline-offset: 4px;
    }

    .nav-btn {
      padding: 10px 18px;
      border-radius: var(--radius-sm);
      border: 1px solid transparent;
      background: rgba(22, 36, 66, 0.72);
      transition: transform 0.12s ease, border 0.12s ease, box-shadow 0.12s ease;
    }

    .nav-btn:hover,
    .nav-btn:focus-visible {
      transform: translateY(-1px);
      border-color: var(--border-strong);
      box-shadow: 0 14px 28px rgba(0, 0, 0, 0.38);
    }

    .nav-btn.active {
      border-color: var(--accent);
      background: linear-gradient(180deg, rgba(36, 58, 96, 0.95), rgba(18, 32, 58, 0.92));
      box-shadow: 0 18px 36px rgba(124, 200, 255, 0.28);
    }

    main {
      padding: 30px;
      display: grid;
    }

    .screen {
      display: none;
      gap: 22px;
      animation: fadeIn 220ms ease;
    }

    .screen.active {
      display: grid;
    }

    .panel {
      padding: 22px 26px;
      border-radius: var(--radius-lg);
      border: 1px solid var(--border);
      background: var(--panel);
      box-shadow: var(--shadow-md);
      display: grid;
      gap: 18px;
    }

    .panel.subtle {
      background: linear-gradient(180deg, rgba(16, 30, 58, 0.55), rgba(12, 22, 42, 0.7));
      border-style: dashed;
    }

    .panel.tight {
      padding: 16px 20px;
      border-radius: var(--radius-md);
    }

    .grid-2 {
      display: grid;
      gap: 22px;
      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    }

    .grid-3 {
      display: grid;
      gap: 18px;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .stack {
      display: grid;
      gap: 14px;
    }

    h1, h2, h3, h4 {
      margin: 0;
      font-weight: 700;
    }

    h1 { font-size: 2.2rem; }
    h2 { font-size: 1.6rem; }
    h3 { font-size: 1.25rem; }

    p {
      margin: 0;
    }

    .muted {
      color: var(--muted);
    }

    .pill {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 4px 11px;
      border-radius: 999px;
      background: rgba(255, 255, 255, 0.07);
      font-size: 0.84rem;
      letter-spacing: 0.02em;
    }

    .chart {
      width: 100%;
      height: 10px;
      border-radius: 999px;
      background: rgba(255, 255, 255, 0.06);
      overflow: hidden;
      position: relative;
    }

    .chart span {
      display: block;
      height: 100%;
      border-radius: 999px;
      background: linear-gradient(90deg, var(--accent), var(--accent-2));
      transition: width 0.3s ease;
    }

    .list {
      display: grid;
      gap: 12px;
    }

    .list-item {
      padding: 12px 16px;
      border-radius: var(--radius-sm);
      border: 1px solid rgba(255, 255, 255, 0.04);
      background: rgba(14, 24, 45, 0.65);
      display: grid;
      gap: 4px;
    }

    .list-item header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 8px;
      padding: 0;
      background: none;
      border: none;
      position: relative;
      box-shadow: none;
    }

    .actions {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .btn {
      padding: 8px 14px;
      border-radius: var(--radius-sm);
      border: 1px solid rgba(255, 255, 255, 0.12);
      background: rgba(18, 30, 52, 0.65);
      font-weight: 600;
      transition: transform 0.12s ease, background 0.12s ease, border 0.12s ease;
    }

    .btn.primary {
      border-color: transparent;
      background: linear-gradient(135deg, var(--accent), var(--accent-2));
      color: #071223;
      box-shadow: 0 14px 28px rgba(124, 200, 255, 0.32);
    }

    .btn.danger {
      background: rgba(255, 116, 142, 0.18);
      border-color: rgba(255, 116, 142, 0.45);
    }

    .btn:hover,
    .btn:focus-visible {
      transform: translateY(-1px);
      border-color: var(--accent);
      background: rgba(36, 56, 94, 0.72);
    }

    .btn.primary:hover,
    .btn.primary:focus-visible {
      background: linear-gradient(135deg, var(--accent-2), var(--accent));
    }

    .stat-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 12px;
      padding: 10px 0;
      border-bottom: 1px solid rgba(255, 255, 255, 0.06);
    }

    .stat-row:last-child {
      border-bottom: none;
    }

    .toast-layer {
      position: fixed;
      inset: 20px auto auto 50%;
      transform: translateX(-50%);
      display: grid;
      gap: 14px;
      z-index: 20;
      width: min(420px, 90vw);
    }

    .toast {
      padding: 16px 20px;
      border-radius: var(--radius-md);
      border: 1px solid rgba(255, 255, 255, 0.08);
      background: linear-gradient(160deg, rgba(18, 32, 60, 0.95), rgba(10, 20, 38, 0.9));
      box-shadow: var(--shadow-md);
      animation: slideUp 320ms cubic-bezier(0.16, 1, 0.3, 1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 14px;
    }

    .toast strong {
      font-size: 0.95rem;
      letter-spacing: 0.02em;
    }

    .toast button {
      background: transparent;
      border: none;
      color: var(--muted);
      font-size: 0.9rem;
      cursor: pointer;
    }

    .badge-grid {
      display: grid;
      gap: 12px;
      grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    }

    .badge {
      padding: 10px 12px;
      border-radius: var(--radius-sm);
      background: rgba(255, 255, 255, 0.04);
      border: 1px solid rgba(255, 255, 255, 0.08);
      display: grid;
      gap: 4px;
    }

    textarea, select, input[type="number"], input[type="text"] {
      width: 100%;
      padding: 10px 12px;
      border-radius: var(--radius-sm);
      border: 1px solid rgba(255, 255, 255, 0.12);
      background: rgba(14, 24, 46, 0.7);
      color: inherit;
      font: inherit;
    }

    footer {
      padding: 20px 28px;
      border-top: 1px solid var(--border);
      background: rgba(6, 10, 20, 0.85);
      font-size: 0.85rem;
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 12px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(6px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes slideUp {
      from { opacity: 0; transform: translateY(16px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @media (max-width: 800px) {
      header { flex-direction: column; align-items: flex-start; }
      main { padding: 20px; }
      .panel { padding: 18px; }
    }
  </style>
</head>
<body>
  <div class="app" role="application">
    <header>
      <div class="brand" aria-label="Game title">
        <span class="logo" aria-hidden="true"></span>
        <span>Echoes of Asteria</span>
      </div>
      <nav aria-label="Primary">
        <button class="nav-btn active" data-screen="dashboard">Dashboard</button>
        <button class="nav-btn" data-screen="character">Character</button>
        <button class="nav-btn" data-screen="inventory">Inventory</button>
        <button class="nav-btn" data-screen="map">Star Map</button>
        <button class="nav-btn" data-screen="battle">Battle</button>
        <button class="nav-btn" data-screen="codex">Codex</button>
        <button class="nav-btn" data-screen="settings">Settings</button>
        <button class="nav-btn" data-screen="qa">QA Suite</button>
      </nav>
    </header>

    <main>
      <section id="dashboard" class="screen active" tabindex="-1" aria-labelledby="dashboard-title">
        <div class="panel">
          <div class="pill">A+++ Launch Checklist</div>
          <h1 id="dashboard-title">Command Hub</h1>
          <p class="muted">Welcome, Captain. Your flagship <strong>Radiant Dawn</strong> awaits your order. All systems are synced to the readiness protocolâ€”review the briefing, deploy a squad, and keep the initiative.</p>
          <div class="grid-2">
            <div class="panel tight">
              <h3>Readiness Score</h3>
              <div class="chart" aria-hidden="true"><span id="readiness-bar"></span></div>
              <p><strong id="readiness-score">93</strong>/100 â€“ <span id="readiness-tier">Prime Launch</span></p>
              <p class="muted" id="readiness-cta"></p>
            </div>
            <div class="panel tight">
              <h3>Live Objectives</h3>
              <div class="list" id="objective-list"></div>
            </div>
          </div>
          <div class="panel subtle">
            <h3>Suggested Actions</h3>
            <div class="actions">
              <button class="btn primary" data-action="start-mission">Start Mission</button>
              <button class="btn" data-action="open-battle">Run Combat Drill</button>
              <button class="btn" data-action="review-codex">Review Codex</button>
              <button class="btn" data-action="open-qa">QA Pulse</button>
            </div>
          </div>
        </div>
      </section>

      <section id="character" class="screen" tabindex="-1" aria-labelledby="character-title">
        <div class="panel">
          <h1 id="character-title">Crew Manifest</h1>
          <div class="grid-2">
            <div class="panel tight">
              <h3>Captain Profile</h3>
              <div class="stack" id="captain-profile"></div>
            </div>
            <div class="panel tight">
              <h3>Squad Status</h3>
              <div class="list" id="squad-list"></div>
            </div>
          </div>
        </div>
      </section>

      <section id="inventory" class="screen" tabindex="-1" aria-labelledby="inventory-title">
        <div class="panel">
          <h1 id="inventory-title">Inventory &amp; Loadout</h1>
          <div class="grid-2">
            <div class="panel tight">
              <h3>Equipped Gear</h3>
              <div class="list" id="loadout-list"></div>
            </div>
            <div class="panel tight">
              <h3>Stowage</h3>
              <div class="list" id="inventory-list"></div>
            </div>
          </div>
        </div>
      </section>

      <section id="map" class="screen" tabindex="-1" aria-labelledby="map-title">
        <div class="panel">
          <h1 id="map-title">Star Chart</h1>
          <p class="muted">Sector sweeps refresh hourly. Pick a theatre, secure supply lines, and watch the threat level.</p>
          <div class="grid-3" id="map-cards"></div>
        </div>
      </section>

      <section id="battle" class="screen" tabindex="-1" aria-labelledby="battle-title">
        <div class="panel">
          <h1 id="battle-title">Tactical Simulator</h1>
          <p class="muted">Simulated engagements use live squad data. Run the drill to validate builds and capture telemetry.</p>
          <div class="panel tight" id="battle-state"></div>
          <div class="actions">
            <button class="btn primary" data-action="battle-step">Advance Round</button>
            <button class="btn" data-action="battle-reset">Reset Encounter</button>
            <button class="btn" data-action="battle-analyze">Analyze Log</button>
          </div>
          <div class="panel subtle">
            <h3>Combat Log</h3>
            <div class="list" id="battle-log" aria-live="polite"></div>
          </div>
        </div>
      </section>

      <section id="codex" class="screen" tabindex="-1" aria-labelledby="codex-title">
        <div class="panel">
          <h1 id="codex-title">Codex Archive</h1>
          <p class="muted">Spoiler-safe lore and mechanics digest. Everything a new captain needs to maintain initiative.</p>
          <div class="list" id="codex-list"></div>
        </div>
      </section>

      <section id="settings" class="screen" tabindex="-1" aria-labelledby="settings-title">
        <div class="panel">
          <h1 id="settings-title">Control Deck</h1>
          <div class="grid-2">
            <div class="panel tight">
              <h3>Preferences</h3>
              <div class="list" id="settings-list"></div>
            </div>
            <div class="panel tight">
              <h3>Save Data</h3>
              <div class="stack">
                <div class="actions">
                  <button class="btn" data-action="save-export">Export Save</button>
                  <label class="btn" for="save-import">Import Save</label>
                  <input type="file" id="save-import" accept="application/json" hidden />
                  <button class="btn danger" data-action="save-reset">Reset Campaign</button>
                </div>
                <textarea id="save-preview" rows="6" readonly></textarea>
              </div>
            </div>
          </div>
        </div>
      </section>

      <section id="qa" class="screen" tabindex="-1" aria-labelledby="qa-title">
        <div class="panel">
          <h1 id="qa-title">Quality Pulse</h1>
          <p class="muted">Automated audit runs every time the state mutates. Review outstanding gaps before sign-off.</p>
          <div class="grid-2">
            <div class="panel tight">
              <h3>Blueprint Checks</h3>
              <div class="list" id="qa-checks"></div>
            </div>
            <div class="panel tight">
              <h3>Self-Test Harness</h3>
              <div class="stack">
                <p class="muted">Run focused suites. Each suite produces deterministic telemetry for sign-off records.</p>
                <div class="actions">
                  <button class="btn" data-action="qa-run-smoke">Run Smoke</button>
                  <button class="btn" data-action="qa-run-campaign">Run Campaign</button>
                  <button class="btn" data-action="qa-run-economy">Run Economy</button>
                </div>
                <textarea id="qa-output" rows="8" readonly></textarea>
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>

    <footer>
      <span>Echoes of Asteria â€“ Launch build r1.3 â€¢ Autosave <span id="autosave-indicator">ready</span></span>
      <span>Controller friendly â€¢ Keyboard + Gamepad</span>
    </footer>
  </div>

  <div class="toast-layer" aria-live="polite" aria-atomic="true"></div>

  <script>
    const storageKey = "echoes-of-asteria-v3";
    const now = () => new Date().toISOString();
    const formatNumber = (n) => Math.round(n * 10) / 10;

    const defaultState = {
      version: 3,
      createdAt: now(),
      captain: {
        name: "Astra Lyric",
        rank: "Commander",
        biography: "Former chartist turned Vanguard. Commands the Radiant Dawn with a focus on precision strikes.",
        stats: { level: 12, xp: 4280, health: 120, energy: 88, morale: 95 },
        loadout: {
          primary: "Nova Lance",
          secondary: "Starborn Repeater",
          armor: "Vanguard Aegis Mk.III",
          relic: "Pulse of the Dawn",
        },
      },
      squad: [
        { id: "lira", name: "Lira Thane", role: "Tactician", readiness: 92, health: 110, skills: ["Overwatch", "Disruption Field"], bond: 80 },
        { id: "corvo", name: "Corvo Hale", role: "Vanguard", readiness: 87, health: 142, skills: ["Rally", "Shield Slam"], bond: 74 },
        { id: "syx", name: "SYX-4", role: "Synth Support", readiness: 90, health: 98, skills: ["Nano Mender", "Flux Reservoir"], bond: 76 },
      ],
      inventory: {
        credits: 18250,
        materials: 320,
        quickSlots: ["Radiant Surge", "Stasis Charge"],
        stowage: [
          { id: "medkit", name: "Harmonic Medkit", type: "consumable", effect: "+35 HP" },
          { id: "focus", name: "Focus Drive", type: "consumable", effect: "+20 Energy" },
          { id: "grenade", name: "Singularity Grenade", type: "offense", effect: "AOE 60 DMG" },
          { id: "plating", name: "Thermal Plating", type: "armor", effect: "+15 Armor" },
        ],
      },
      missions: [
        { id: "m1", name: "Carina Relay", region: "Outer Belt", threat: 32, reward: { credits: 1200, materials: 40 }, description: "Restore the relay array and repel raiders." },
        { id: "m2", name: "Rift of Velis", region: "Nebula Front", threat: 56, reward: { credits: 2100, materials: 60 }, description: "Seal phase breaches before the Conflux arrives." },
        { id: "m3", name: "Echo Citadel", region: "Serris Expanse", threat: 71, reward: { credits: 3200, materials: 90 }, description: "Board the citadel and recover the lost attunement core." },
      ],
      codex: [
        { id: "doctrine", title: "Vanguard Doctrine", summary: "Maintain initiative, cut the head, control the field.", detail: "Vanguard squads prioritize tempo and decisive plays. Every encounter opens with a spike turn that sets the tone for the skirmish. Protect morale and sustain to preserve tempo." },
        { id: "factions", title: "Factions", summary: "Known actors across the Fringe.", detail: "The Conflux extends from the Rift, wielding wave-based psionic armaments. The Guild of Silica trades in hybrid synth tech. Fringe Corsairs test defenses weekly." },
        { id: "systems", title: "Systems", summary: "Progression, loadout, and economy fundamentals.", detail: "Earn XP through missions and drills, invest in trait nodes for multiplicative growth, and balance spend between arsenal upkeep, ship upgrades, and alliance favors." },
      ],
      objectives: [
        { id: "briefing", title: "Review Carina Relay Briefing", status: "ready", description: "Read the mission dossier and ready the squad." },
        { id: "loadout", title: "Optimize Captain Loadout", status: "progress", description: "Slot one defensive and one utility module." },
        { id: "drill", title: "Run Combat Drill", status: "ready", description: "Complete at least one simulation round." },
      ],
      settings: {
        hints: true,
        battleAnimations: true,
        autosave: true,
        controllerLayout: "smart"
      },
      qa: {
        lastRun: null,
        checks: [],
      },
      battle: {
        encounter: null,
        log: [],
      },
      lastSaved: now(),
    };

    function loadState() {
      try {
        const raw = localStorage.getItem(storageKey);
        if (!raw) return structuredClone(defaultState);
        const data = JSON.parse(raw);
        return { ...structuredClone(defaultState), ...data };
      } catch (error) {
        console.warn("Failed to load state", error);
        return structuredClone(defaultState);
      }
    }

    function saveState(state) {
      try {
        localStorage.setItem(storageKey, JSON.stringify(state));
      } catch (error) {
        console.warn("Failed to persist state", error);
      }
    }

    const state = loadState();

    const listeners = new Set();
    function emit(change) {
      listeners.forEach((fn) => fn(state, change));
      if (state.settings.autosave) {
        state.lastSaved = now();
        saveState(state);
        renderSavePreview();
        document.querySelector('#autosave-indicator').textContent = "saved";
        setTimeout(() => {
          document.querySelector('#autosave-indicator').textContent = "ready";
        }, 1200);
      }
    }

    function onState(cb) {
      listeners.add(cb);
      return () => listeners.delete(cb);
    }

    function toast(message, options = {}) {
      const layer = document.querySelector('.toast-layer');
      const toastEl = document.createElement('div');
      toastEl.className = 'toast';
      toastEl.innerHTML = `<strong>${message}</strong><button aria-label="Dismiss">Dismiss</button>`;
      if (options.variant) {
        toastEl.dataset.variant = options.variant;
      }
      const remove = () => {
        toastEl.remove();
      };
      toastEl.querySelector('button').addEventListener('click', remove);
      layer.appendChild(toastEl);
      setTimeout(remove, options.duration ?? 4200);
    }

    function readinessScore() {
      const completion = state.objectives.reduce((acc, objective) => {
        return acc + (objective.status === 'complete' ? 1 : objective.status === 'progress' ? 0.6 : 0.2);
      }, 0) / state.objectives.length;
      const squad = state.squad.reduce((acc, member) => acc + member.readiness, 0) / state.squad.length;
      return Math.round((completion * 55) + (squad * 0.35) + (state.captain.stats.morale * 0.1));
    }

    function readinessTier(score) {
      if (score >= 95) return "Prime Launch";
      if (score >= 88) return "Combat Ready";
      if (score >= 75) return "Needs Review";
      return "Grounded";
    }

    function renderDashboard() {
      const score = readinessScore();
      document.querySelector('#readiness-bar').style.width = `${Math.min(score, 100)}%`;
      document.querySelector('#readiness-score').textContent = score;
      document.querySelector('#readiness-tier').textContent = readinessTier(score);
      const cta = score >= 95 ? "All launch gates clear. Consider escalating to Conflux theatre." : score >= 88 ? "Minimal polishing required. Validate squad comps." : "Complete outstanding objectives to restore readiness.";
      document.querySelector('#readiness-cta').textContent = cta;
      const list = document.querySelector('#objective-list');
      list.innerHTML = '';
      state.objectives.forEach((objective) => {
        const item = document.createElement('div');
        item.className = 'list-item';
        item.innerHTML = `
          <header>
            <strong>${objective.title}</strong>
            <span class="pill">${objective.status}</span>
          </header>
          <p class="muted">${objective.description}</p>
        `;
        list.appendChild(item);
      });
    }

    function renderCharacter() {
      const profile = document.querySelector('#captain-profile');
      profile.innerHTML = `
        <div>
          <strong>${state.captain.name}</strong>
          <p class="muted">${state.captain.rank}</p>
          <p>${state.captain.biography}</p>
        </div>
        <div class="stack">
          ${Object.entries(state.captain.stats).map(([key, value]) => {
            const label = key.charAt(0).toUpperCase() + key.slice(1);
            return `<div class="stat-row"><span>${label}</span><strong>${value}</strong></div>`;
          }).join('')}
        </div>
      `;
      const squadList = document.querySelector('#squad-list');
      squadList.innerHTML = '';
      state.squad.forEach((member) => {
        const item = document.createElement('div');
        item.className = 'list-item';
        item.innerHTML = `
          <header>
            <strong>${member.name}</strong>
            <span class="pill">${member.role}</span>
          </header>
          <p class="muted">Readiness ${member.readiness}% â€¢ Bond ${member.bond}%</p>
          <p>Skills: ${member.skills.join(', ')}</p>
        `;
        squadList.appendChild(item);
      });
    }

    function renderInventory() {
      const loadout = document.querySelector('#loadout-list');
      loadout.innerHTML = '';
      Object.entries(state.captain.loadout).forEach(([slot, item]) => {
        const el = document.createElement('div');
        el.className = 'list-item';
        el.innerHTML = `
          <header>
            <strong>${slot.toUpperCase()}</strong>
            <button class="btn" data-slot="${slot}" data-action="unequip">Unequip</button>
          </header>
          <p>${item}</p>
        `;
        loadout.appendChild(el);
      });
      const inventoryList = document.querySelector('#inventory-list');
      inventoryList.innerHTML = '';
      state.inventory.stowage.forEach((item) => {
        const el = document.createElement('div');
        el.className = 'list-item';
        el.innerHTML = `
          <header>
            <strong>${item.name}</strong>
            <button class="btn" data-item="${item.id}" data-action="equip">Equip</button>
          </header>
          <p class="muted">${item.type}</p>
          <p>${item.effect}</p>
        `;
        inventoryList.appendChild(el);
      });
    }

    function renderMap() {
      const container = document.querySelector('#map-cards');
      container.innerHTML = '';
      state.missions.forEach((mission) => {
        const threatTone = mission.threat >= 70 ? 'danger' : mission.threat >= 50 ? 'warning' : 'success';
        const el = document.createElement('div');
        el.className = 'panel tight';
        el.innerHTML = `
          <div class="pill" style="background: var(--accent-soft); color: var(--accent);">${mission.region}</div>
          <h3>${mission.name}</h3>
          <p>${mission.description}</p>
          <p class="muted">Threat <strong style="color: var(--${threatTone});">${mission.threat}</strong> â€¢ Reward ${mission.reward.credits}c / ${mission.reward.materials}m</p>
          <div class="actions">
            <button class="btn primary" data-mission="${mission.id}" data-action="deploy">Deploy</button>
            <button class="btn" data-mission="${mission.id}" data-action="pin">Pin</button>
          </div>
        `;
        container.appendChild(el);
      });
    }

    function renderBattle() {
      const statePanel = document.querySelector('#battle-state');
      const encounter = state.battle.encounter;
      if (!encounter) {
        statePanel.innerHTML = `
          <p>No engagement running.</p>
          <p class="muted">Hit Advance Round to generate a live scenario. Squad composition mirrors your current roster.</p>
        `;
      } else {
        statePanel.innerHTML = `
          <div class="grid-2">
            <div>
              <h3>Allies</h3>
              ${encounter.allies.map((ally) => `<p>${ally.name} â€“ HP ${ally.hp} / ${ally.maxHp}</p>`).join('')}
            </div>
            <div>
              <h3>Enemies</h3>
              ${encounter.enemies.map((enemy) => `<p>${enemy.name} â€“ HP ${enemy.hp} / ${enemy.maxHp}</p>`).join('')}
            </div>
          </div>
          <p class="muted">Round ${encounter.round} â€¢ Momentum ${encounter.momentum > 0 ? '+' : ''}${encounter.momentum}</p>
        `;
      }
      const log = document.querySelector('#battle-log');
      log.innerHTML = '';
      state.battle.log.slice(-12).forEach((entry) => {
        const item = document.createElement('div');
        item.className = 'list-item';
        item.innerHTML = `<header><strong>${entry.title}</strong><span class="pill">${entry.type}</span></header><p>${entry.body}</p>`;
        log.appendChild(item);
      });
    }

    function renderCodex() {
      const list = document.querySelector('#codex-list');
      list.innerHTML = '';
      state.codex.forEach((entry) => {
        const el = document.createElement('details');
        el.className = 'list-item';
        el.innerHTML = `<summary><strong>${entry.title}</strong> â€“ <span class="muted">${entry.summary}</span></summary><p>${entry.detail}</p>`;
        list.appendChild(el);
      });
    }

    function renderSettings() {
      const list = document.querySelector('#settings-list');
      list.innerHTML = '';
      const settings = [
        { key: 'hints', label: 'Show Guidance Hints', type: 'boolean' },
        { key: 'battleAnimations', label: 'Battle Animations', type: 'boolean' },
        { key: 'autosave', label: 'Autosave', type: 'boolean' },
        { key: 'controllerLayout', label: 'Controller Layout', type: 'select', options: [
          { value: 'smart', label: 'Smart Navigation' },
          { value: 'grid', label: 'Grid Focus' },
          { value: 'minimal', label: 'Minimal HUD' },
        ]},
      ];
      settings.forEach((setting) => {
        const item = document.createElement('div');
        item.className = 'list-item';
        item.innerHTML = `<header><strong>${setting.label}</strong></header>`;
        if (setting.type === 'boolean') {
          const toggle = document.createElement('button');
          toggle.className = 'btn';
          toggle.dataset.action = 'toggle-setting';
          toggle.dataset.setting = setting.key;
          toggle.textContent = state.settings[setting.key] ? 'Enabled' : 'Disabled';
          item.appendChild(toggle);
        } else if (setting.type === 'select') {
          const select = document.createElement('select');
          select.dataset.setting = setting.key;
          setting.options.forEach((option) => {
            const opt = document.createElement('option');
            opt.value = option.value;
            opt.textContent = option.label;
            if (state.settings[setting.key] === option.value) opt.selected = true;
            select.appendChild(opt);
          });
          select.addEventListener('change', (event) => {
            state.settings[setting.key] = event.target.value;
            emit({ type: 'settings:update', key: setting.key });
            toast(`${setting.label} set to ${event.target.selectedOptions[0].textContent}`);
          });
          item.appendChild(select);
        }
        list.appendChild(item);
      });
    }

    function renderSavePreview() {
      document.querySelector('#save-preview').value = JSON.stringify({ ...state, battle: undefined, qa: undefined }, null, 2);
    }

    function renderQA() {
      const checks = document.querySelector('#qa-checks');
      checks.innerHTML = '';
      state.qa.checks.forEach((check) => {
        const item = document.createElement('div');
        item.className = 'list-item';
        item.innerHTML = `
          <header>
            <strong>${check.name}</strong>
            <span class="pill">${check.status}</span>
          </header>
          <p>${check.detail}</p>
        `;
        checks.appendChild(item);
      });
      const output = state.qa.lastRun ? `${state.qa.lastRun.name} @ ${state.qa.lastRun.timestamp}\n${state.qa.lastRun.output.join('\n')}` : 'No suite executed.';
      document.querySelector('#qa-output').value = output;
    }

    function updateQA() {
      const score = readinessScore();
      const checks = [];
      checks.push({
        name: 'Readiness >= 90',
        status: score >= 90 ? 'pass' : 'warn',
        detail: score >= 90 ? 'Launch readiness confirmed.' : 'Complete objectives to raise readiness.',
      });
      const pinned = state.objectives.filter((objective) => objective.status !== 'complete');
      checks.push({
        name: 'Outstanding Objectives',
        status: pinned.length ? 'warn' : 'pass',
        detail: pinned.length ? `${pinned.length} remaining objectives.` : 'All mission objectives complete.',
      });
      const resources = state.inventory.credits >= 1000 && state.inventory.materials >= 50;
      checks.push({
        name: 'Economy Reserve',
        status: resources ? 'pass' : 'warn',
        detail: resources ? 'Sustainable reserves on hand.' : 'Acquire more credits/materials before escalation.',
      });
      state.qa.checks = checks;
    }

    function ensureBattleEncounter() {
      if (!state.battle.encounter) {
        const encounter = {
          round: 0,
          momentum: 0,
          allies: state.squad.map((member) => ({ name: member.name, hp: 80 + Math.floor(Math.random() * 20), maxHp: 120 })),
          enemies: [
            { name: 'Conflux Wraith', hp: 140, maxHp: 140 },
            { name: 'Phase Reaver', hp: 120, maxHp: 120 },
          ],
        };
        state.battle.encounter = encounter;
        state.battle.log = [];
      }
    }

    function battleStep() {
      ensureBattleEncounter();
      const encounter = state.battle.encounter;
      encounter.round += 1;
      const ally = encounter.allies[Math.floor(Math.random() * encounter.allies.length)];
      const enemy = encounter.enemies[Math.floor(Math.random() * encounter.enemies.length)];
      const damage = Math.floor(Math.random() * 24) + 18;
      enemy.hp = Math.max(0, enemy.hp - damage);
      encounter.momentum += 3;
      state.battle.log.push({ title: `Round ${encounter.round}`, type: 'ally', body: `${ally.name} strikes ${enemy.name} for ${damage}.` });
      if (enemy.hp === 0) {
        state.battle.log.push({ title: 'Enemy Down', type: 'system', body: `${enemy.name} destabilized.` });
      }
      const livingEnemies = encounter.enemies.filter((unit) => unit.hp > 0);
      if (!livingEnemies.length) {
        state.battle.log.push({ title: 'Victory', type: 'system', body: 'Encounter resolved. Momentum channel stabilized.' });
        state.battle.encounter = null;
        toast('Combat drill complete. Rewards queued.', { variant: 'success' });
        grantRewards({ credits: 300, materials: 20 });
        return;
      }
      const counterTarget = encounter.allies[Math.floor(Math.random() * encounter.allies.length)];
      const counterDamage = Math.floor(Math.random() * 18) + 12;
      counterTarget.hp = Math.max(0, counterTarget.hp - counterDamage);
      encounter.momentum -= 2;
      state.battle.log.push({ title: `Counter`, type: 'enemy', body: `${livingEnemies[0].name} retaliates for ${counterDamage} damage on ${counterTarget.name}.` });
      emit({ type: 'battle:step' });
    }

    function battleReset() {
      state.battle.encounter = null;
      state.battle.log = [];
      emit({ type: 'battle:reset' });
    }

    function battleAnalyze() {
      const summary = state.battle.log.reduce((acc, entry) => {
        if (!acc[entry.type]) acc[entry.type] = 0;
        acc[entry.type] += 1;
        return acc;
      }, {});
      const report = Object.entries(summary).map(([type, count]) => `${type}: ${count}`).join(', ') || 'No events logged.';
      toast(`Battle log â€“ ${report}`);
    }

    function grantRewards(reward) {
      state.inventory.credits += reward.credits;
      state.inventory.materials += reward.materials;
      toast(`Rewards secured: ${reward.credits} credits, ${reward.materials} materials.`, { variant: 'success' });
      emit({ type: 'economy:reward' });
    }

    function deployMission(id) {
      const mission = state.missions.find((mission) => mission.id === id);
      if (!mission) return;
      state.objectives = state.objectives.map((objective) => objective.id === 'briefing' ? { ...objective, status: 'complete' } : objective);
      toast(`${mission.name} underway. Threat ${mission.threat}.`, { variant: 'info' });
      grantRewards(mission.reward);
      emit({ type: 'mission:deployed', id });
    }

    function pinMission(id) {
      state.objectives = state.objectives.map((objective) => objective.id === 'briefing' ? objective : { ...objective, status: 'progress' });
      toast('Mission pinned to tracker.');
      emit({ type: 'mission:pinned', id });
    }

    function equipItem(id) {
      const itemIndex = state.inventory.stowage.findIndex((item) => item.id === id);
      if (itemIndex === -1) return;
      const item = state.inventory.stowage[itemIndex];
      state.inventory.stowage.splice(itemIndex, 1);
      state.captain.loadout.relic = item.name;
      state.objectives = state.objectives.map((objective) => objective.id === 'loadout' ? { ...objective, status: 'complete' } : objective);
      toast(`${item.name} equipped.`);
      emit({ type: 'inventory:equip', id });
    }

    function unequip(slot) {
      const current = state.captain.loadout[slot];
      if (!current) return;
      state.inventory.stowage.push({ id: `${slot}-${Date.now()}`, name: current, type: slot, effect: 'Stored' });
      state.captain.loadout[slot] = 'Unassigned';
      toast(`${slot.toUpperCase()} unequipped.`);
      emit({ type: 'inventory:unequip', slot });
    }

    function toggleSetting(key) {
      state.settings[key] = !state.settings[key];
      toast(`${key} ${state.settings[key] ? 'enabled' : 'disabled'}.`);
      emit({ type: 'settings:toggle', key });
    }

    function exportSave() {
      const data = JSON.stringify(state, null, 2);
      const blob = new Blob([data], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `echoes-save-${Date.now()}.json`;
      document.body.appendChild(link);
      link.click();
      link.remove();
      URL.revokeObjectURL(url);
      toast('Save exported.');
    }

    function importSave(file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        try {
          const data = JSON.parse(event.target.result);
          Object.assign(state, data);
          emit({ type: 'save:import' });
          toast('Save imported.');
        } catch (error) {
          toast('Import failed. Invalid file.', { variant: 'danger' });
        }
      };
      reader.readAsText(file);
    }

    function resetSave() {
      Object.keys(state).forEach((key) => {
        state[key] = structuredClone(defaultState)[key];
      });
      emit({ type: 'save:reset' });
      toast('Campaign reset.');
    }

    function runSuite(name, runner) {
      const result = runner();
      state.qa.lastRun = { name, output: result.output, timestamp: new Date().toLocaleTimeString() };
      toast(`${name} suite complete.`);
      emit({ type: 'qa:suite', name });
    }

    const suites = {
      smoke() {
        const output = [];
        output.push(`Squad size: ${state.squad.length}`);
        output.push(`Inventory items: ${state.inventory.stowage.length}`);
        output.push(`Readiness: ${readinessScore()}`);
        return { output };
      },
      campaign() {
        const output = [];
        state.missions.forEach((mission) => {
          output.push(`${mission.name}: threat ${mission.threat}, reward ${mission.reward.credits}`);
        });
        return { output };
      },
      economy() {
        const output = [];
        const burnRate = Math.round((state.inventory.credits / 3) * 0.42);
        output.push(`Credits: ${state.inventory.credits}`);
        output.push(`Materials: ${state.inventory.materials}`);
        output.push(`Projected burn: ${burnRate}`);
        return { output };
      },
    };

    function switchScreen(id) {
      document.querySelectorAll('.screen').forEach((screen) => {
        screen.classList.toggle('active', screen.id === id);
      });
      document.querySelectorAll('.nav-btn').forEach((btn) => {
        btn.classList.toggle('active', btn.dataset.screen === id);
      });
      const active = document.getElementById(id);
      if (active) active.focus({ preventScroll: true });
    }

    document.querySelectorAll('.nav-btn').forEach((btn) => {
      btn.addEventListener('click', () => switchScreen(btn.dataset.screen));
    });

    document.querySelector('main').addEventListener('click', (event) => {
      const action = event.target.closest('[data-action]');
      if (!action) return;
      const { action: type } = action.dataset;
      if (type === 'start-mission') {
        switchScreen('map');
        toast('Navigate to the Star Chart to deploy.');
      }
      if (type === 'open-battle') switchScreen('battle');
      if (type === 'review-codex') switchScreen('codex');
      if (type === 'open-qa') switchScreen('qa');
      if (type === 'deploy') deployMission(action.dataset.mission);
      if (type === 'pin') pinMission(action.dataset.mission);
      if (type === 'equip') equipItem(action.dataset.item);
      if (type === 'unequip') unequip(action.dataset.slot);
      if (type === 'toggle-setting') toggleSetting(action.dataset.setting);
      if (type === 'save-export') exportSave();
      if (type === 'save-reset') resetSave();
      if (type === 'battle-step') battleStep();
      if (type === 'battle-reset') battleReset();
      if (type === 'battle-analyze') battleAnalyze();
      if (type === 'qa-run-smoke') runSuite('Smoke', suites.smoke);
      if (type === 'qa-run-campaign') runSuite('Campaign', suites.campaign);
      if (type === 'qa-run-economy') runSuite('Economy', suites.economy);
    });

    document.querySelector('#save-import').addEventListener('change', (event) => {
      const file = event.target.files[0];
      if (file) importSave(file);
      event.target.value = '';
    });

    onState(() => {
      updateQA();
      renderDashboard();
      renderCharacter();
      renderInventory();
      renderMap();
      renderBattle();
      renderCodex();
      renderSettings();
      renderSavePreview();
      renderQA();
    });

    updateQA();
    renderDashboard();
    renderCharacter();
    renderInventory();
    renderMap();
    renderBattle();
    renderCodex();
    renderSettings();
    renderSavePreview();
    renderQA();
  </script>
</body>
</html>
